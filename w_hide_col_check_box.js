const columnTooltips = {
    "Shop": "This column contains a link to the shop or service where the trading view script can be purchased or accessed. Typically hosted on platforms like TradingView or other strategy marketplaces.",
    "Price": "Displays the price in dollars for the trading view script or strategy, indicating the cost of accessing this strategy.",
    "Name": "The name or identifier of the trading view strategy or indicator, often indicative of the technical method used, like 'Triple Moving Average' or 'RSI Strategy'.",
    "Time Frame": "Specifies the time interval for the trading strategy, such as 1d for 1 day or 4h for 4 hours. Defines how frequently new data points are generated in the strategy.",
    "Strategy Chart": "Link or image showing the strategy's chart representation, including plotted indicators and signals for visual analysis.",
    "Candle Chart": "Provides a link or image of the candle chart, showing price movements over specific time intervals based on the strategy.",
    "Net Profit ($)": "Represents the net profit in dollars generated by the strategy after gains and losses are accounted for over the specified period.",
    "Indicators Name": "Names of the indicator(s) used in the strategy, providing insight into the technical analysis methods applied.",
    "Indicators": "Specific indicators or technical signals used within the strategy, often with parameter settings to help signal trade actions.",
    "Index": "Specifies the trading index or market, like NASDAQ or BINANCE, where the strategy is applied. This helps contextualize the strategy’s market.",
    "Symbol": "Ticker symbol of the asset (e.g., AAPL for Apple or BTCUSD for Bitcoin/USD), identifying the specific asset the strategy targets.",
    "Net Profit (%)": "Shows the percentage net profit achieved by the strategy, helpful for comparing strategy profitability across assets and periods.",
    "Closed Trades": "Indicates the total count of closed trades in the strategy’s timeframe, showing how active the strategy is.",
    "Win Rate (%)": "Displays the percentage of trades that were profitable, helping gauge the strategy’s success in producing profitable trades.",
    "Profit Factor": "The ratio of gross profit to gross loss, which helps evaluate the strategy's overall profitability. A value above 1 indicates profitability.",
    "Max Loss ($)": "Maximum dollar loss incurred in a single trade or across trades within the strategy, helping assess potential financial risk.",
    "Max Loss (%)": "Largest percentage drop (drawdown) experienced in a trade, reflecting the maximum loss risk in percentage terms.",
    "Avg Profit ($)": "Average profit per trade in dollars, providing insight into the reward side of the strategy's risk-reward balance.",
    "Avg Profit (%)": "Average profit per trade in percentage, showing the expected return on each trade based on past performance.",
    "Avg Bars/Trade": "Shows the average number of bars (time intervals) that each trade is open. Useful for understanding the average trade duration.",
    "Release Date": "The date when the strategy was published or released, helpful for users looking for new or established strategies.",
    "Months Trained": "Number of months the strategy or model has been back-tested or trained on historical data to improve its accuracy and performance.",
    "Trades Per Candle": "The average number of trades executed per candle or time interval, indicating the strategy's activity level.",
    "Numbers Candles": "Total count of candles used in the analysis or training period, providing an idea of the data volume backing the strategy.",
    "Precision f1 (%)": "The F1 score metric (percentage) indicating the accuracy of trades or signals made by the strategy, used to evaluate precision in classification.",
    "Tree Deep": "Represents the depth of the decision tree model (if used). Higher depth indicates greater model complexity, affecting decision making."
};


// Main function to initialize the column toggle functionality
function initializeColumnToggleHideColumns() {
    initializeColumnCheckboxes();
    bindCheckboxEvents();
}

// Function to initialize checkboxes based on table headers
// Function to initialize checkboxes based on table headers
function initializeColumnCheckboxes() {
    const tableHeaders = $('#dataTable th');
    const checkboxContainer = $('#column-toggle-container');
    checkboxContainer.empty(); // Clear the container

    // List of columns that should not have checkboxes (like "Shop")
    const excludedColumns = ['Shop'];

    // List of columns that should be unchecked by default
    const uncheckedColumns = [
        'Indicators','Symbol', 'Max Loss ($)', 'Max Loss (%)', 'Profit Factor', 'Avg Bars/Trade', 'Numbers candles', 'Months trained',"Release Date","Months Trained","Numbers Candles", 'Precision f1 (%)', 'Tree Deep'
    ];

    tableHeaders.each(function(index) {
        const columnName = $(this).text();

        // Skip generating a checkbox for the "Shop" column
        if (excludedColumns.includes(columnName)) {
            return; // Skip the "Shop" column
        }

        // Create a div to wrap the checkbox and label
        const checkboxWrapper = createCheckboxWrapper(index, columnName, uncheckedColumns);

        // Append the wrapper div to the container
        checkboxContainer.append(checkboxWrapper);

        // Apply initial column visibility based on checkbox state
        const checkbox = checkboxWrapper.find('input[type="checkbox"]');
        toggleColumnVisibility(index, checkbox.is(':checked'));
    });
}


// Function to create a checkbox wrapper (div) with a checkbox and label
function createCheckboxWrapper(index, columnName, uncheckedColumns) {

    // Create a div to wrap the checkbox and label
    const checkboxWrapper = $('<div>', {
        class: 'checkbox-wrapper' // Add a class for custom styling
    });

    // Create a checkbox for each column
    const checkbox = $('<input>', {
        type: 'checkbox',
        id: `column-toggle-${index}`,
        'data-column-index': index,
        checked: !uncheckedColumns.includes(columnName) // Uncheck if the column is in the list
    });

    // Create a label for the checkbox with a tooltip
    const label = $('<label>', {
        for: `column-toggle-${index}`,
        text: columnName,
        title: columnTooltips[columnName] || "No description available" // Set tooltip based on column name
    });

    // Append the checkbox and label inside the wrapper div
    checkboxWrapper.append(checkbox).append(label);

    return checkboxWrapper;
}



// Function to bind the checkbox change events to show/hide columns
function bindCheckboxEvents() {
    $('#column-toggle-container input[type="checkbox"]').change(function() {
        const columnIndex = $(this).data('column-index');
        toggleColumnVisibility(columnIndex, $(this).is(':checked'));
    });
}

// Function to show/hide the columns based on checkbox state
function toggleColumnVisibility(columnIndex, isVisible) {
    const th = $(`#dataTable th:nth-child(${columnIndex + 1})`);
    const td = $(`#dataTable td:nth-child(${columnIndex + 1})`);

    if (isVisible) {
        th.show();
        td.show();
    } else {
        th.hide();
        td.hide();
    }
}





function saveColumnPreferences() {
    const preferences = {};
    $('#column-toggle-container input[type=checkbox]').each(function() {
        preferences[$(this).data('column-index')] = $(this).is(':checked');
    });
    localStorage.setItem('columnPreferences', JSON.stringify(preferences));
}

function loadColumnPreferences() {
    const preferences = JSON.parse(localStorage.getItem('columnPreferences'));
    if (preferences) {
        $.each(preferences, function(index, isVisible) {
            $(`#column-toggle-${index}`).prop('checked', isVisible).trigger('change');
        });
    }
}

// Call save function whenever a checkbox changes
$('#column-toggle-container input[type=checkbox]').on('change', saveColumnPreferences);

// Call load function on page load
$(document).ready(function() {
    loadColumnPreferences();
});
