 Help me make a web page html css js
I will pass you files: w_filter.js , w_filters.html, w_sliders_histogram.js, w_index_.html, w_load.js and w_styles_a.css and w_styles_b.css


w_filter.js:

function filterTable() {
  let table = document.getElementById('dataTable');
  let tr = table.getElementsByTagName('tr');
  let visibleRowCount = 0; // Initialize counter for visible rows

  // Get selected values from multi-select dropdowns
  const selectedTickers = $('#tickerDropdown').val() || [];
  const selectedIntervals = $('#intervalDropdown').val() || [];
  const selectedKeyTechs = $('#keyTechsDropdown').val() || [];

  const filters = [
    { column: 4, min: parseFloat(document.getElementById('profitUsdMinTextbox').value), max: parseFloat(document.getElementById('profitUsdMaxTextbox').value) },
    { column: 5, min: parseFloat(document.getElementById('netProfitPerMinTextbox').value), max: parseFloat(document.getElementById('netProfitPerMaxTextbox').value) },
    { column: 6, min: parseFloat(document.getElementById('totalClosedTradesMinTextbox').value), max: parseFloat(document.getElementById('totalClosedTradesMaxTextbox').value) },
    { column: 7, min: parseFloat(document.getElementById('percentProfitablePerMinTextbox').value), max: parseFloat(document.getElementById('percentProfitablePerMaxTextbox').value) },
    { column: 8, min: parseFloat(document.getElementById('profitFactorMinTextbox').value), max: parseFloat(document.getElementById('profitFactorMaxTextbox').value) },
    { column: 9, min: parseFloat(document.getElementById('maxDrawdownUsdMinTextbox').value), max: parseFloat(document.getElementById('maxDrawdownUsdMaxTextbox').value) },
    { column: 10, min: parseFloat(document.getElementById('maxDrawdownPerMinTextbox').value), max: parseFloat(document.getElementById('maxDrawdownPerMaxTextbox').value) },
    { column: 11, min: parseFloat(document.getElementById('avgTradeUsdMinTextbox').value), max: parseFloat(document.getElementById('avgTradeUsdMaxTextbox').value) },
    { column: 12, min: parseFloat(document.getElementById('avgTradePerMinTextbox').value), max: parseFloat(document.getElementById('avgTradePerMaxTextbox').value) },
    { column: 13, min: parseFloat(document.getElementById('avgBarsInTradesMinTextbox').value), max: parseFloat(document.getElementById('avgBarsInTradesMaxTextbox').value) },
    { column: 16, min: parseFloat(document.getElementById('priceMinTextbox').value), max: parseFloat(document.getElementById('priceMaxTextbox').value) },
  ];

  for (let i = 1; i < tr.length; i++) {
    let display = true;

    // Check if the table row contains enough columns
    let tickerColumn = tr[i].getElementsByTagName('td')[0];
    let intervalColumn = tr[i].getElementsByTagName('td')[1];
    let keyTechsColumn = tr[i].getElementsByTagName('td')[2];

    // If no options are selected, hide the row (no match)
    if (selectedTickers.length === 0 || selectedIntervals.length === 0 || selectedKeyTechs.length === 0) {
      display = false;
    }

    // Check if the dropdown has selected options, and match them with the column content
    if (tickerColumn && selectedTickers.length > 0 && !selectedTickers.includes(tickerColumn.textContent)) {
      display = false;
    }
    if (intervalColumn && selectedIntervals.length > 0 && !selectedIntervals.includes(intervalColumn.textContent)) {
      display = false;
    }
    if (keyTechsColumn && selectedKeyTechs.length > 0 && !selectedKeyTechs.includes(keyTechsColumn.textContent)) {
      display = false;
    }

    // Numeric filters
    filters.forEach(filter => {
      let td = tr[i].getElementsByTagName('td')[filter.column];
      if (td && td.textContent) {
        let value = parseFloat(td.textContent) || 0;
        if (value < filter.min || value > filter.max) {
          display = false;
        }
      } else {
        display = false;  // Hide rows without valid values
      }
    });

    // Apply display logic
    tr[i].style.display = display ? '' : 'none';

    // Count visible rows
    if (display) {
      visibleRowCount++;
    }
  }

  // Update the counter in the div
  document.getElementById('visibleRowCount').textContent = visibleRowCount;

  // Disable or enable Deselect All buttons based on selections
  toggleDeselectButton('#tickerDropdown', '#tickerDeselectAll');
  toggleDeselectButton('#intervalDropdown', '#intervalDeselectAll');
  toggleDeselectButton('#keyTechsDropdown', '#keyTechsDeselectAll');
}

// Function to disable or enable the Deselect All button based on selections
function toggleDeselectButton(dropdownId, buttonId) {
  const selectedOptions = $(dropdownId).val() || [];
  const button = document.querySelector(buttonId);

  if (selectedOptions.length === 0) {
    button.disabled = true;
    button.classList.add('disabled-button');
  } else {
    button.disabled = false;
    button.classList.remove('disabled-button');
  }
}

w_filters.html:

<!-- w_filters.html -->

<!-- Net Profit (USD) Range -->
<p>
  <label for="profitUsdMinTextbox">Net Profit ($):</label>
  <input type="number" id="profitUsdMinTextbox" value="0" min="0" max="22000" step="10">
  <input type="number" id="profitUsdMaxTextbox" value="22000" min="0" max="22000" step="10">
</p>
<div id="histogram-container-profit"></div>
<div id="slider-range-profit"></div>

<!-- Price Range -->
<p>
  <label for="priceMinTextbox">Price:</label>
  <input type="number" id="priceMinTextbox" value="0.0" min="0.0" max="100.0" step="1">
  <input type="number" id="priceMaxTextbox" value="100.0" min="0.0" max="100.0" step="1">
</p>
<div id="histogram-container-price"></div>
<div id="slider-range-price"></div>

<!-- Symbol (Ticker) -->
<p>
  <label for="tickerDropdown">Symbol:</label>
  <button id="tickerSelectAll" onclick="selectAll('#tickerDropdown')" onchange="filterTable()">Select All</button>
  <button id="tickerDeselectAll" onclick="deselectAll('#tickerDropdown')" onchange="filterTable()">Deselect All</button>
  <select id="tickerDropdown" multiple="multiple" onchange="filterTable()">
    <!-- Options will be dynamically added here -->
  </select>
</p>

<!-- Timeframe (Interval) -->
<p>
  <label for="intervalDropdown">Timeframe:</label>
  <button id="intervalSelectAll" onclick="selectAll('#intervalDropdown')" onchange="filterTable()">Select All</button>
  <button id="intervalDeselectAll" onclick="deselectAll('#intervalDropdown')" onchange="filterTable()">Deselect All</button>
  <select id="intervalDropdown" multiple="multiple" onchange="filterTable()">
    <!-- Options will be dynamically added here -->
  </select>
</p>

<!-- Indicators (Key Techs) -->
<p>
  <label for="keyTechsDropdown">Indicators:</label>
  <button id="keyTechsSelectAll" onclick="selectAll('#keyTechsDropdown')" onchange="filterTable()">Select All</button>
  <button id="keyTechsDeselectAll" onclick="deselectAll('#keyTechsDropdown')" onchange="filterTable()">Deselect All</button>
  <select id="keyTechsDropdown" multiple="multiple" onchange="filterTable()">
    <!-- Options will be dynamically added here -->
  </select>
</p>

<!-- Net Profit (%) Range -->
<p>
  <label for="netProfitPerMinTextbox">Net Profit (%):</label>
  <input type="number" id="netProfitPerMinTextbox" value="0.00" min="0.00" max="3.00" step="0.05">
  <input type="number" id="netProfitPerMaxTextbox" value="3.00" min="0.00" max="3.00" step="0.05">
</p>
<div id="slider-range-netProfitPer"></div>

<!-- Closed Trades Range -->
<p>
  <label for="totalClosedTradesMinTextbox">Closed Trades:</label>
  <input type="number" id="totalClosedTradesMinTextbox" value="0" min="0" max="3000" step="10">
  <input type="number" id="totalClosedTradesMaxTextbox" value="3000" min="0" max="3000" step="10">
</p>
<div id="slider-range-totalClosedTrades"></div>

<!-- Win Rate (%) Range -->
<p>
  <label for="percentProfitablePerMinTextbox">Win Rate (%):</label>
  <input type="number" id="percentProfitablePerMinTextbox" value="0.0" min="0.0" max="100.0" step="0.05">
  <input type="number" id="percentProfitablePerMaxTextbox" value="100.0" min="0.0" max="100.0" step="0.05">
</p>
<div id="slider-range-percentProfitablePer"></div>

<!-- Profit Factor Range -->
<p>
  <label for="profitFactorMinTextbox">Profit Factor:</label>
  <input type="number" id="profitFactorMinTextbox" value="0.05" min="0.05" max="20.256" step="1">
  <input type="number" id="profitFactorMaxTextbox" value="20.256" min="0.05" max="20.256" step="1">
</p>
<div id="slider-range-profitFactor"></div>

<!-- Max Loss (USD) Range -->
<p>
  <label for="maxDrawdownUsdMinTextbox">Max Loss ($):</label>
  <input type="number" id="maxDrawdownUsdMinTextbox" value="0" min="0" max="3000" step="1">
  <input type="number" id="maxDrawdownUsdMaxTextbox" value="3000" min="0" max="3000" step="1">
</p>
<div id="slider-range-maxDrawdownUsd"></div>

<!-- Max Loss (%) Range -->
<p>
  <label for="maxDrawdownPerMinTextbox">Max Loss (%):</label>
  <input type="number" id="maxDrawdownPerMinTextbox" value="0.0" min="0.0" max="2.00" step="0.05">
  <input type="number" id="maxDrawdownPerMaxTextbox" value="2.00" min="0.0" max="2.00" step="0.05">
</p>
<div id="slider-range-maxDrawdownPer"></div>

<!-- Avg Profit (USD) Range -->
<p>
  <label for="avgTradeUsdMinTextbox">Avg Profit ($):</label>
  <input type="number" id="avgTradeUsdMinTextbox" value="0.0" min="0.0" max="400.0" step="1">
  <input type="number" id="avgTradeUsdMaxTextbox" value="400.0" min="0.0" max="400.0" step="1">
</p>
<div id="slider-range-avgTradeUsd"></div>

<!-- Avg Profit (%) Range -->
<p>
  <label for="avgTradePerMinTextbox">Avg Profit (%):</label>
  <input type="number" id="avgTradePerMinTextbox" value="0.0" min="0.0" max="4000.0" step="10">
  <input type="number" id="avgTradePerMaxTextbox" value="4000.0" min="0.0" max="4000.0" step="10">
</p>
<div id="slider-range-avgTradePer"></div>

<!-- Avg Bars/Trade Range -->
<p>
  <label for="avgBarsInTradesMinTextbox">Avg Bars/Trade:</label>
  <input type="number" id="avgBarsInTradesMinTextbox" value="0.0" min="0.0" max="2000.0" step="10">
  <input type="number" id="avgBarsInTradesMaxTextbox" value="2000.0" min="0.0" max="2000.0" step="10">
</p>
<div id="slider-range-avgBarsInTrades"></div>

w_index_.html:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>jQuery UI Sliders with Interactive Histograms</title>
  <link rel="stylesheet" href="https://code.jquery.com/ui/1.14.0/themes/base/jquery-ui.css">
  <link rel="stylesheet" href="w_styles_a.css"><link rel="stylesheet" href="w_styles_b.css">
  <!-- fSelect CSS -->
  <link rel="stylesheet" href="fSelect.css">
  <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
  <script src="https://code.jquery.com/ui/1.14.0/jquery-ui.js"></script>
  <!-- fSelect JS -->
  <script src="fSelect.js"></script>
</head>
<body>

<h1>Dynamic Search Table with Dual-Handle Sliders and Interactive Histograms</h1>

<!-- Main container to hold the filters on the left and table in the center -->
<div class="layout-container">

  <!-- Filter elements on the left -->
  <div class="filter-column">
    <!-- Counter for the number of visible rows -->
    <div>
      <p>Number of visible rows: <span id="visibleRowCount">0</span></p>
    </div>

    <!-- Container to load the filters from w_filters.html -->
    <div id="filters-container"></div>
  </div>

  <!-- Table in the center -->
  <div class="table-container">
<table id="dataTable">
    <thead>
        <tr>
            <th>Symbol</th>
            <th>Timeframe</th>
            <th>Indicators</th>
                <th>id_model</th>
            <th>Net Profit ($)</th>
            <th>Net Profit (%)</th>
            <th>Closed Trades</th>
            <th>Win Rate (%)</th>
            <th>Profit Factor</th>
            <th>Max Loss ($)</th>
            <th>Max Loss (%)</th>
            <th>Avg Profit ($)</th>
            <th>Avg Profit (%)</th>
            <th>Avg Bars/Trade</th>
                <th>Candle Chart</th>
                <th>Strategy Chart</th>
                <th>Price</th>
        </tr>
    </thead>
    <tbody>
        <!-- Data will be dynamically inserted here -->
    </tbody>
</table>

  </div>

</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
<script src="w_sliders_histogram.js"></script>
<script src="w_load.js"></script>
<script src="w_filter.js"></script>
<script>
  $(function() {
    // Load filters from w_filters.html and initialize all sliders
    $("#filters-container").load("w_filters.html", function() {
      load_full_sliders(); // Initialize all sliders after the filters are loaded
      // Load data and initialize histograms
      loadAndProcessData();
    });


  });
</script>

</body>
</html>


w_sliders_histogram.js:
function generateHistogram(data, bins, min, max) {
  const binWidth = (max - min) / bins;
  const histogram = Array(bins).fill(0);

  data.forEach(value => {
    const bin = Math.floor((value - min) / binWidth);
    if (bin >= 0 && bin < bins) {
      histogram[bin]++;
    }
  });

  return histogram;
}

function updateHistogram(min, max, type) {
  const histogramContainer = document.getElementById(histogram-container-${type});
  const histogramData = type === 'profit' ? histogramDataProfit : histogramDataPrice;
  histogramContainer.innerHTML = '';  // Clear previous histogram

  const maxHeight = Math.max(...histogramData);
  const minBarHeight = 5; // Minimum bar height for non-zero bars
  histogramData.forEach((value, index) => {
      const bar = document.createElement('div');
      bar.className = 'histogram-bar';
      if (value > 0) {
          const height = (value / maxHeight) * 100;
          bar.style.height = ${Math.max(height, minBarHeight)}%;
      } else {
          bar.style.height = '0'; // Height stays at 0 for bars with no data
      }
      bar.dataset.value = index * (max - min) / histogramData.length + min;  // Assign a value based on range
      histogramContainer.appendChild(bar);
  });

  // Set initial opacity based on the current slider range
  updateHistogramOpacity(min, max, type);
}

function updateHistogramOpacity(min, max, type) {
  const bars = document.querySelectorAll(#histogram-container-${type} .histogram-bar);
  bars.forEach(bar => {
    const value = parseFloat(bar.dataset.value);
    if (value >= min && value <= max) {
      bar.style.opacity = 1;  // Fully visible
    } else {
      bar.style.opacity = 0.2;  // Transparent
    }
  });
}

function initialize_Sliders_with_Histogram({ sliderId, minTextboxId, maxTextboxId, histogramType, min, max, step }) {
  // Initialize slider
  $(sliderId).slider({
    range: true,
    min: min,
    max: max,
    step: step,
    values: [min, max],
    slide: function(event, ui) {
      $(minTextboxId).val(ui.values[0]);
      $(maxTextboxId).val(ui.values[1]);
      filterTable();
      updateHistogramOpacity(ui.values[0], ui.values[1], histogramType);
    }
  });

  // Set initial textbox values based on the slider
  $(minTextboxId).val($(sliderId).slider("values", 0));
  $(maxTextboxId).val($(sliderId).slider("values", 1));

  // Update histogram on slider change
  updateHistogram($(sliderId).slider("values", 0), $(sliderId).slider("values", 1), histogramType);
}

function initialize_Sliders_with_Histogram({ sliderId, minTextboxId, maxTextboxId, histogramType, min, max, step }) {
  $(sliderId).slider({
    range: true,
    min: min,
    max: max,
    step: step,
    values: [min, max],
    slide: function(event, ui) {
      $(minTextboxId).val(ui.values[0]);
      $(maxTextboxId).val(ui.values[1]);
      filterTable();
      updateHistogramOpacity(ui.values[0], ui.values[1], histogramType);
    }
  });

  $(minTextboxId).val($(sliderId).slider("values", 0));
  $(maxTextboxId).val($(sliderId).slider("values", 1));
}

function initialize_Regular_Slider({ sliderId, minTextboxId, maxTextboxId, min, max, step }) {
  $(sliderId).slider({
    range: true,
    min: min,
    max: max,
    step: step,
    values: [min, max],
    slide: function(event, ui) {
      $(minTextboxId).val(ui.values[0]);
      $(maxTextboxId).val(ui.values[1]);
      filterTable();
    }
  });

  $(minTextboxId).val($(sliderId).slider("values", 0));
  $(maxTextboxId).val($(sliderId).slider("values", 1));
}

function load_full_sliders() {
  // Load sliders with histograms (Price and Net Profit USD)
  initialize_Sliders_with_Histogram({
    sliderId: "#slider-range-profit",
    minTextboxId: "#profitUsdMinTextbox",
    maxTextboxId: "#profitUsdMaxTextbox",
    histogramType: 'profit',
    min: 0,
    max: 22000,
    step: 10
  });

  initialize_Sliders_with_Histogram({
    sliderId: "#slider-range-price",
    minTextboxId: "#priceMinTextbox",
    maxTextboxId: "#priceMaxTextbox",
    histogramType: 'price',
    min: 0.0,
    max: 100.0,
    step: 1
  });

  // Load remaining sliders without histograms
  $("#slider-range-netProfitPer, #slider-range-totalClosedTrades, #slider-range-percentProfitablePer, #slider-range-profitFactor, #slider-range-maxDrawdownUsd, #slider-range-maxDrawdownPer, #slider-range-avgTradeUsd, #slider-range-avgTradePer, #slider-range-avgBarsInTrades").each(function() {
    const id = $(this).attr('id').replace('slider-range-', '');
    const minTextbox = $(#${id}MinTextbox);
    const maxTextbox = $(#${id}MaxTextbox);
    const minValue = parseFloat(minTextbox.attr('min'));
    const maxValue = parseFloat(maxTextbox.attr('max'));

    $(this).slider({
      range: true,
      min: minValue,
      max: maxValue,
      step: parseFloat(minTextbox.attr('step')),
      values: [minValue, maxValue],
      slide: function(event, ui) {
        minTextbox.val(ui.values[0]);
        maxTextbox.val(ui.values[1]);
        filterTable(); // Filter table on slider change
      }
    });

    minTextbox.val($(this).slider("values", 0));
    maxTextbox.val($(this).slider("values", 1));
  });

  // Link textboxes to sliders for direct input changes
  $("input[type='number']").on('input', function() {
    const id = $(this).attr('id').replace('MinTextbox', '').replace('MaxTextbox', '');
    const minTextbox = $(#${id}MinTextbox);
    const maxTextbox = $(#${id}MaxTextbox);
    const slider = $(#slider-range-${id});

    var minVal = parseFloat(minTextbox.val());
    var maxVal = parseFloat(maxTextbox.val());

    if (minVal < maxVal) {
      slider.slider("values", [minVal, maxVal]);
      filterTable();
    }
  });
}

